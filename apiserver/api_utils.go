/*
 * App Stopwatch API
 *
 * API to access and configure the app stopwatch
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"net/http"
	"strings"
)

// UtilsApiController binds http requests to an api service and writes the service results to the http response
type UtilsApiController struct {
	service      UtilsApiServicer
	errorHandler ErrorHandler
}

// UtilsApiOption for how the controller is set up.
type UtilsApiOption func(*UtilsApiController)

// WithUtilsApiErrorHandler inject ErrorHandler into controller
func WithUtilsApiErrorHandler(h ErrorHandler) UtilsApiOption {
	return func(c *UtilsApiController) {
		c.errorHandler = h
	}
}

// NewUtilsApiController creates a default api controller
func NewUtilsApiController(s UtilsApiServicer, opts ...UtilsApiOption) Router {
	controller := &UtilsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UtilsApiController
func (c *UtilsApiController) Routes() Routes {
	return Routes{
		{
			"GetStatus",
			strings.ToUpper("Get"),
			"/v1/status",
			c.GetStatus,
		},
	}
}

// GetStatus - Get the status of the app
func (c *UtilsApiController) GetStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
